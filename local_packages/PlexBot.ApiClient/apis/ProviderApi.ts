/* tslint:disable */
/* eslint-disable */
/**
 * PlexBot API
 * This the PlexBot Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: filip.iricanin@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiMediaSearchRequest,
  IProvider,
  ISearchFilter,
  MediaCategory,
  PaginatedResponseOfIProviderSearchItemResult,
} from '../models/index';
import {
    ApiMediaSearchRequestFromJSON,
    ApiMediaSearchRequestToJSON,
    IProviderFromJSON,
    IProviderToJSON,
    ISearchFilterFromJSON,
    ISearchFilterToJSON,
    MediaCategoryFromJSON,
    MediaCategoryToJSON,
    PaginatedResponseOfIProviderSearchItemResultFromJSON,
    PaginatedResponseOfIProviderSearchItemResultToJSON,
} from '../models/index';

export interface ProviderGetAvailableProvidersRequest {
    searchEnabled?: boolean;
}

export interface ProviderGetProviderFiltersRequest {
    providerId: string;
    mediaCategory?: MediaCategory;
}

export interface ProviderSearchRequest {
    providerId: string;
    apiMediaSearchRequest: ApiMediaSearchRequest;
}

/**
 * 
 */
export class ProviderApi extends runtime.BaseAPI {

    /**
     * Gets the list of enabled providers.
     */
    async providerGetAvailableProvidersRaw(requestParameters: ProviderGetAvailableProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IProvider>>> {
        const queryParameters: any = {};

        if (requestParameters['searchEnabled'] != null) {
            queryParameters['searchEnabled'] = requestParameters['searchEnabled'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IProviderFromJSON));
    }

    /**
     * Gets the list of enabled providers.
     */
    async providerGetAvailableProviders(requestParameters: ProviderGetAvailableProvidersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IProvider>> {
        const response = await this.providerGetAvailableProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the available search filters for a given provider and a media category
     */
    async providerGetProviderFiltersRaw(requestParameters: ProviderGetProviderFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ISearchFilter>>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling providerGetProviderFilters().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['mediaCategory'] != null) {
            queryParameters['mediaCategory'] = requestParameters['mediaCategory'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/providers/{providerId}/search-filters`.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ISearchFilterFromJSON));
    }

    /**
     * Gets the available search filters for a given provider and a media category
     */
    async providerGetProviderFilters(requestParameters: ProviderGetProviderFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ISearchFilter>> {
        const response = await this.providerGetProviderFiltersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search the provider website and gets the results. The results are paginated.
     */
    async providerSearchRaw(requestParameters: ProviderSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfIProviderSearchItemResult>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling providerSearch().'
            );
        }

        if (requestParameters['apiMediaSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'apiMediaSearchRequest',
                'Required parameter "apiMediaSearchRequest" was null or undefined when calling providerSearch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/providers/{providerId}/search`.replace(`{${"providerId"}}`, encodeURIComponent(String(requestParameters['providerId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiMediaSearchRequestToJSON(requestParameters['apiMediaSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfIProviderSearchItemResultFromJSON(jsonValue));
    }

    /**
     * Search the provider website and gets the results. The results are paginated.
     */
    async providerSearch(requestParameters: ProviderSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseOfIProviderSearchItemResult> {
        const response = await this.providerSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
