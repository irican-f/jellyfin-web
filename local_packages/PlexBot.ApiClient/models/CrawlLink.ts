/* tslint:disable */
/* eslint-disable */
/**
 * PlexBot API
 * This the PlexBot Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: filip.iricanin@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreationOrigin } from './CreationOrigin';
import {
    CreationOriginFromJSON,
    CreationOriginFromJSONTyped,
    CreationOriginToJSON,
} from './CreationOrigin';
import type { MediaCategory } from './MediaCategory';
import {
    MediaCategoryFromJSON,
    MediaCategoryFromJSONTyped,
    MediaCategoryToJSON,
} from './MediaCategory';
import type { MediaServerType } from './MediaServerType';
import {
    MediaServerTypeFromJSON,
    MediaServerTypeFromJSONTyped,
    MediaServerTypeToJSON,
} from './MediaServerType';
import type { Provider } from './Provider';
import {
    ProviderFromJSON,
    ProviderFromJSONTyped,
    ProviderToJSON,
} from './Provider';

/**
 * 
 * @export
 * @interface CrawlLink
 */
export interface CrawlLink {
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    mediaId?: string;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    secondName?: string;
    /**
     * 
     * @type {Provider}
     * @memberof CrawlLink
     */
    provider?: Provider;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    providerId?: string;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    providerItemId?: string;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    providerCategory?: string;
    /**
     * 
     * @type {MediaCategory}
     * @memberof CrawlLink
     */
    category?: MediaCategory;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    fileHost?: string;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    thumbnailUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CrawlLink
     */
    airedEpisodesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CrawlLink
     */
    totalEpisodesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CrawlLink
     */
    season?: number;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    quality?: string;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    version?: string;
    /**
     * 
     * @type {number}
     * @memberof CrawlLink
     */
    productionYear?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CrawlLink
     */
    downloaded?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CrawlLink
     */
    hasError?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    createdBy?: string;
    /**
     * 
     * @type {string}
     * @memberof CrawlLink
     */
    authorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof CrawlLink
     */
    createdAt?: Date;
    /**
     * 
     * @type {CreationOrigin}
     * @memberof CrawlLink
     */
    origin?: CreationOrigin;
    /**
     * 
     * @type {MediaServerType}
     * @memberof CrawlLink
     */
    mediaServerType?: MediaServerType;
    /**
     * 
     * @type {boolean}
     * @memberof CrawlLink
     */
    isEnabled?: boolean;
}

/**
 * Check if a given object implements the CrawlLink interface.
 */
export function instanceOfCrawlLink(value: object): value is CrawlLink {
    return true;
}

export function CrawlLinkFromJSON(json: any): CrawlLink {
    return CrawlLinkFromJSONTyped(json, false);
}

export function CrawlLinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): CrawlLink {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'mediaId': json['mediaId'] == null ? undefined : json['mediaId'],
        'name': json['name'] == null ? undefined : json['name'],
        'secondName': json['secondName'] == null ? undefined : json['secondName'],
        'provider': json['provider'] == null ? undefined : ProviderFromJSON(json['provider']),
        'providerId': json['providerId'] == null ? undefined : json['providerId'],
        'providerItemId': json['providerItemId'] == null ? undefined : json['providerItemId'],
        'providerCategory': json['providerCategory'] == null ? undefined : json['providerCategory'],
        'category': json['category'] == null ? undefined : MediaCategoryFromJSON(json['category']),
        'url': json['url'] == null ? undefined : json['url'],
        'fileHost': json['fileHost'] == null ? undefined : json['fileHost'],
        'thumbnailUrl': json['thumbnailUrl'] == null ? undefined : json['thumbnailUrl'],
        'airedEpisodesCount': json['airedEpisodesCount'] == null ? undefined : json['airedEpisodesCount'],
        'totalEpisodesCount': json['totalEpisodesCount'] == null ? undefined : json['totalEpisodesCount'],
        'season': json['season'] == null ? undefined : json['season'],
        'quality': json['quality'] == null ? undefined : json['quality'],
        'version': json['version'] == null ? undefined : json['version'],
        'productionYear': json['productionYear'] == null ? undefined : json['productionYear'],
        'downloaded': json['downloaded'] == null ? undefined : json['downloaded'],
        'hasError': json['hasError'] == null ? undefined : json['hasError'],
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'authorId': json['authorId'] == null ? undefined : json['authorId'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'origin': json['origin'] == null ? undefined : CreationOriginFromJSON(json['origin']),
        'mediaServerType': json['mediaServerType'] == null ? undefined : MediaServerTypeFromJSON(json['mediaServerType']),
        'isEnabled': json['isEnabled'] == null ? undefined : json['isEnabled'],
    };
}

export function CrawlLinkToJSON(value?: CrawlLink | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'mediaId': value['mediaId'],
        'name': value['name'],
        'secondName': value['secondName'],
        'provider': ProviderToJSON(value['provider']),
        'providerId': value['providerId'],
        'providerItemId': value['providerItemId'],
        'providerCategory': value['providerCategory'],
        'category': MediaCategoryToJSON(value['category']),
        'url': value['url'],
        'fileHost': value['fileHost'],
        'thumbnailUrl': value['thumbnailUrl'],
        'airedEpisodesCount': value['airedEpisodesCount'],
        'totalEpisodesCount': value['totalEpisodesCount'],
        'season': value['season'],
        'quality': value['quality'],
        'version': value['version'],
        'productionYear': value['productionYear'],
        'downloaded': value['downloaded'],
        'hasError': value['hasError'],
        'createdBy': value['createdBy'],
        'authorId': value['authorId'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'origin': CreationOriginToJSON(value['origin']),
        'mediaServerType': MediaServerTypeToJSON(value['mediaServerType']),
        'isEnabled': value['isEnabled'],
    };
}

