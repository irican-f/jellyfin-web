/* tslint:disable */
/* eslint-disable */
/**
 * PlexBot API
 * This the PlexBot Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: filip.iricanin@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EventInfo } from './EventInfo';
import {
    EventInfoFromJSON,
    EventInfoFromJSONTyped,
    EventInfoToJSON,
} from './EventInfo';
import type { MemberInfo } from './MemberInfo';
import {
    MemberInfoFromJSON,
    MemberInfoFromJSONTyped,
    MemberInfoToJSON,
} from './MemberInfo';
import type { MethodInfo } from './MethodInfo';
import {
    MethodInfoFromJSON,
    MethodInfoFromJSONTyped,
    MethodInfoToJSON,
} from './MethodInfo';
import type { PropertyInfo } from './PropertyInfo';
import {
    PropertyInfoFromJSON,
    PropertyInfoFromJSONTyped,
    PropertyInfoToJSON,
} from './PropertyInfo';
import type { FieldInfo } from './FieldInfo';
import {
    FieldInfoFromJSON,
    FieldInfoFromJSONTyped,
    FieldInfoToJSON,
} from './FieldInfo';
import type { ConstructorInfo } from './ConstructorInfo';
import {
    ConstructorInfoFromJSON,
    ConstructorInfoFromJSONTyped,
    ConstructorInfoToJSON,
} from './ConstructorInfo';

/**
 * 
 * @export
 * @interface TypeInfo
 */
export interface TypeInfo {
    /**
     * 
     * @type {Array<string>}
     * @memberof TypeInfo
     */
    genericTypeParameters?: Array<string>;
    /**
     * 
     * @type {Array<ConstructorInfo>}
     * @memberof TypeInfo
     */
    declaredConstructors?: Array<ConstructorInfo>;
    /**
     * 
     * @type {Array<EventInfo>}
     * @memberof TypeInfo
     */
    declaredEvents?: Array<EventInfo>;
    /**
     * 
     * @type {Array<FieldInfo>}
     * @memberof TypeInfo
     */
    declaredFields?: Array<FieldInfo>;
    /**
     * 
     * @type {Array<MemberInfo>}
     * @memberof TypeInfo
     */
    declaredMembers?: Array<MemberInfo>;
    /**
     * 
     * @type {Array<MethodInfo>}
     * @memberof TypeInfo
     */
    declaredMethods?: Array<MethodInfo>;
    /**
     * 
     * @type {Array<TypeInfo>}
     * @memberof TypeInfo
     */
    declaredNestedTypes?: Array<TypeInfo>;
    /**
     * 
     * @type {Array<PropertyInfo>}
     * @memberof TypeInfo
     */
    declaredProperties?: Array<PropertyInfo>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TypeInfo
     */
    implementedInterfaces?: Array<string>;
}

/**
 * Check if a given object implements the TypeInfo interface.
 */
export function instanceOfTypeInfo(value: object): value is TypeInfo {
    return true;
}

export function TypeInfoFromJSON(json: any): TypeInfo {
    return TypeInfoFromJSONTyped(json, false);
}

export function TypeInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypeInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'genericTypeParameters': json['genericTypeParameters'] == null ? undefined : json['genericTypeParameters'],
        'declaredConstructors': json['declaredConstructors'] == null ? undefined : ((json['declaredConstructors'] as Array<any>).map(ConstructorInfoFromJSON)),
        'declaredEvents': json['declaredEvents'] == null ? undefined : ((json['declaredEvents'] as Array<any>).map(EventInfoFromJSON)),
        'declaredFields': json['declaredFields'] == null ? undefined : ((json['declaredFields'] as Array<any>).map(FieldInfoFromJSON)),
        'declaredMembers': json['declaredMembers'] == null ? undefined : ((json['declaredMembers'] as Array<any>).map(MemberInfoFromJSON)),
        'declaredMethods': json['declaredMethods'] == null ? undefined : ((json['declaredMethods'] as Array<any>).map(MethodInfoFromJSON)),
        'declaredNestedTypes': json['declaredNestedTypes'] == null ? undefined : ((json['declaredNestedTypes'] as Array<any>).map(TypeInfoFromJSON)),
        'declaredProperties': json['declaredProperties'] == null ? undefined : ((json['declaredProperties'] as Array<any>).map(PropertyInfoFromJSON)),
        'implementedInterfaces': json['implementedInterfaces'] == null ? undefined : json['implementedInterfaces'],
    };
}

export function TypeInfoToJSON(value?: TypeInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'genericTypeParameters': value['genericTypeParameters'],
        'declaredConstructors': value['declaredConstructors'] == null ? undefined : ((value['declaredConstructors'] as Array<any>).map(ConstructorInfoToJSON)),
        'declaredEvents': value['declaredEvents'] == null ? undefined : ((value['declaredEvents'] as Array<any>).map(EventInfoToJSON)),
        'declaredFields': value['declaredFields'] == null ? undefined : ((value['declaredFields'] as Array<any>).map(FieldInfoToJSON)),
        'declaredMembers': value['declaredMembers'] == null ? undefined : ((value['declaredMembers'] as Array<any>).map(MemberInfoToJSON)),
        'declaredMethods': value['declaredMethods'] == null ? undefined : ((value['declaredMethods'] as Array<any>).map(MethodInfoToJSON)),
        'declaredNestedTypes': value['declaredNestedTypes'] == null ? undefined : ((value['declaredNestedTypes'] as Array<any>).map(TypeInfoToJSON)),
        'declaredProperties': value['declaredProperties'] == null ? undefined : ((value['declaredProperties'] as Array<any>).map(PropertyInfoToJSON)),
        'implementedInterfaces': value['implementedInterfaces'],
    };
}

