/* tslint:disable */
/* eslint-disable */
/**
 * PlexBot API
 * This the PlexBot Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: filip.iricanin@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CustomAttributeData } from './CustomAttributeData';
import {
    CustomAttributeDataFromJSON,
    CustomAttributeDataFromJSONTyped,
    CustomAttributeDataToJSON,
} from './CustomAttributeData';
import type { CallingConventions } from './CallingConventions';
import {
    CallingConventionsFromJSON,
    CallingConventionsFromJSONTyped,
    CallingConventionsToJSON,
} from './CallingConventions';
import type { MethodImplAttributes } from './MethodImplAttributes';
import {
    MethodImplAttributesFromJSON,
    MethodImplAttributesFromJSONTyped,
    MethodImplAttributesToJSON,
} from './MethodImplAttributes';
import type { RuntimeMethodHandle } from './RuntimeMethodHandle';
import {
    RuntimeMethodHandleFromJSON,
    RuntimeMethodHandleFromJSONTyped,
    RuntimeMethodHandleToJSON,
} from './RuntimeMethodHandle';
import type { ParameterInfo } from './ParameterInfo';
import {
    ParameterInfoFromJSON,
    ParameterInfoFromJSONTyped,
    ParameterInfoToJSON,
} from './ParameterInfo';
import type { Module } from './Module';
import {
    ModuleFromJSON,
    ModuleFromJSONTyped,
    ModuleToJSON,
} from './Module';
import type { MethodAttributes } from './MethodAttributes';
import {
    MethodAttributesFromJSON,
    MethodAttributesFromJSONTyped,
    MethodAttributesToJSON,
} from './MethodAttributes';
import type { MemberTypes } from './MemberTypes';
import {
    MemberTypesFromJSON,
    MemberTypesFromJSONTyped,
    MemberTypesToJSON,
} from './MemberTypes';

/**
 * 
 * @export
 * @interface MethodInfo
 */
export interface MethodInfo {
    /**
     * 
     * @type {MemberTypes}
     * @memberof MethodInfo
     */
    memberType?: MemberTypes;
    /**
     * 
     * @type {string}
     * @memberof MethodInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof MethodInfo
     */
    declaringType?: string;
    /**
     * 
     * @type {string}
     * @memberof MethodInfo
     */
    reflectedType?: string;
    /**
     * 
     * @type {Module}
     * @memberof MethodInfo
     */
    module?: Module;
    /**
     * 
     * @type {Array<CustomAttributeData>}
     * @memberof MethodInfo
     */
    customAttributes?: Array<CustomAttributeData>;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isCollectible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MethodInfo
     */
    metadataToken?: number;
    /**
     * 
     * @type {MethodAttributes}
     * @memberof MethodInfo
     */
    attributes?: MethodAttributes;
    /**
     * 
     * @type {MethodImplAttributes}
     * @memberof MethodInfo
     */
    methodImplementationFlags?: MethodImplAttributes;
    /**
     * 
     * @type {CallingConventions}
     * @memberof MethodInfo
     */
    callingConvention?: CallingConventions;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isAbstract?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isConstructor?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isFinal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isHideBySig?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isSpecialName?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isStatic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isVirtual?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isFamily?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isFamilyAndAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isFamilyOrAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isPrivate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isPublic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isConstructedGenericMethod?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isGenericMethod?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isGenericMethodDefinition?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    containsGenericParameters?: boolean;
    /**
     * 
     * @type {RuntimeMethodHandle}
     * @memberof MethodInfo
     */
    methodHandle?: RuntimeMethodHandle;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isSecurityCritical?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isSecuritySafeCritical?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MethodInfo
     */
    isSecurityTransparent?: boolean;
    /**
     * 
     * @type {ParameterInfo}
     * @memberof MethodInfo
     */
    returnParameter?: ParameterInfo;
    /**
     * 
     * @type {string}
     * @memberof MethodInfo
     */
    returnType?: string;
    /**
     * 
     * @type {object}
     * @memberof MethodInfo
     */
    returnTypeCustomAttributes?: object;
    /**
     * 
     * @type {number}
     * @memberof MethodInfo
     */
    genericParameterCount?: number;
}

/**
 * Check if a given object implements the MethodInfo interface.
 */
export function instanceOfMethodInfo(value: object): value is MethodInfo {
    return true;
}

export function MethodInfoFromJSON(json: any): MethodInfo {
    return MethodInfoFromJSONTyped(json, false);
}

export function MethodInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MethodInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'memberType': json['memberType'] == null ? undefined : MemberTypesFromJSON(json['memberType']),
        'name': json['name'] == null ? undefined : json['name'],
        'declaringType': json['declaringType'] == null ? undefined : json['declaringType'],
        'reflectedType': json['reflectedType'] == null ? undefined : json['reflectedType'],
        'module': json['module'] == null ? undefined : ModuleFromJSON(json['module']),
        'customAttributes': json['customAttributes'] == null ? undefined : ((json['customAttributes'] as Array<any>).map(CustomAttributeDataFromJSON)),
        'isCollectible': json['isCollectible'] == null ? undefined : json['isCollectible'],
        'metadataToken': json['metadataToken'] == null ? undefined : json['metadataToken'],
        'attributes': json['attributes'] == null ? undefined : MethodAttributesFromJSON(json['attributes']),
        'methodImplementationFlags': json['methodImplementationFlags'] == null ? undefined : MethodImplAttributesFromJSON(json['methodImplementationFlags']),
        'callingConvention': json['callingConvention'] == null ? undefined : CallingConventionsFromJSON(json['callingConvention']),
        'isAbstract': json['isAbstract'] == null ? undefined : json['isAbstract'],
        'isConstructor': json['isConstructor'] == null ? undefined : json['isConstructor'],
        'isFinal': json['isFinal'] == null ? undefined : json['isFinal'],
        'isHideBySig': json['isHideBySig'] == null ? undefined : json['isHideBySig'],
        'isSpecialName': json['isSpecialName'] == null ? undefined : json['isSpecialName'],
        'isStatic': json['isStatic'] == null ? undefined : json['isStatic'],
        'isVirtual': json['isVirtual'] == null ? undefined : json['isVirtual'],
        'isAssembly': json['isAssembly'] == null ? undefined : json['isAssembly'],
        'isFamily': json['isFamily'] == null ? undefined : json['isFamily'],
        'isFamilyAndAssembly': json['isFamilyAndAssembly'] == null ? undefined : json['isFamilyAndAssembly'],
        'isFamilyOrAssembly': json['isFamilyOrAssembly'] == null ? undefined : json['isFamilyOrAssembly'],
        'isPrivate': json['isPrivate'] == null ? undefined : json['isPrivate'],
        'isPublic': json['isPublic'] == null ? undefined : json['isPublic'],
        'isConstructedGenericMethod': json['isConstructedGenericMethod'] == null ? undefined : json['isConstructedGenericMethod'],
        'isGenericMethod': json['isGenericMethod'] == null ? undefined : json['isGenericMethod'],
        'isGenericMethodDefinition': json['isGenericMethodDefinition'] == null ? undefined : json['isGenericMethodDefinition'],
        'containsGenericParameters': json['containsGenericParameters'] == null ? undefined : json['containsGenericParameters'],
        'methodHandle': json['methodHandle'] == null ? undefined : RuntimeMethodHandleFromJSON(json['methodHandle']),
        'isSecurityCritical': json['isSecurityCritical'] == null ? undefined : json['isSecurityCritical'],
        'isSecuritySafeCritical': json['isSecuritySafeCritical'] == null ? undefined : json['isSecuritySafeCritical'],
        'isSecurityTransparent': json['isSecurityTransparent'] == null ? undefined : json['isSecurityTransparent'],
        'returnParameter': json['returnParameter'] == null ? undefined : ParameterInfoFromJSON(json['returnParameter']),
        'returnType': json['returnType'] == null ? undefined : json['returnType'],
        'returnTypeCustomAttributes': json['returnTypeCustomAttributes'] == null ? undefined : json['returnTypeCustomAttributes'],
        'genericParameterCount': json['genericParameterCount'] == null ? undefined : json['genericParameterCount'],
    };
}

export function MethodInfoToJSON(value?: MethodInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'memberType': MemberTypesToJSON(value['memberType']),
        'name': value['name'],
        'declaringType': value['declaringType'],
        'reflectedType': value['reflectedType'],
        'module': ModuleToJSON(value['module']),
        'customAttributes': value['customAttributes'] == null ? undefined : ((value['customAttributes'] as Array<any>).map(CustomAttributeDataToJSON)),
        'isCollectible': value['isCollectible'],
        'metadataToken': value['metadataToken'],
        'attributes': MethodAttributesToJSON(value['attributes']),
        'methodImplementationFlags': MethodImplAttributesToJSON(value['methodImplementationFlags']),
        'callingConvention': CallingConventionsToJSON(value['callingConvention']),
        'isAbstract': value['isAbstract'],
        'isConstructor': value['isConstructor'],
        'isFinal': value['isFinal'],
        'isHideBySig': value['isHideBySig'],
        'isSpecialName': value['isSpecialName'],
        'isStatic': value['isStatic'],
        'isVirtual': value['isVirtual'],
        'isAssembly': value['isAssembly'],
        'isFamily': value['isFamily'],
        'isFamilyAndAssembly': value['isFamilyAndAssembly'],
        'isFamilyOrAssembly': value['isFamilyOrAssembly'],
        'isPrivate': value['isPrivate'],
        'isPublic': value['isPublic'],
        'isConstructedGenericMethod': value['isConstructedGenericMethod'],
        'isGenericMethod': value['isGenericMethod'],
        'isGenericMethodDefinition': value['isGenericMethodDefinition'],
        'containsGenericParameters': value['containsGenericParameters'],
        'methodHandle': RuntimeMethodHandleToJSON(value['methodHandle']),
        'isSecurityCritical': value['isSecurityCritical'],
        'isSecuritySafeCritical': value['isSecuritySafeCritical'],
        'isSecurityTransparent': value['isSecurityTransparent'],
        'returnParameter': ParameterInfoToJSON(value['returnParameter']),
        'returnType': value['returnType'],
        'returnTypeCustomAttributes': value['returnTypeCustomAttributes'],
        'genericParameterCount': value['genericParameterCount'],
    };
}

