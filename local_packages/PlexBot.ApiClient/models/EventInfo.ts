/* tslint:disable */
/* eslint-disable */
/**
 * PlexBot API
 * This the PlexBot Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: filip.iricanin@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CustomAttributeData } from './CustomAttributeData';
import {
    CustomAttributeDataFromJSON,
    CustomAttributeDataFromJSONTyped,
    CustomAttributeDataToJSON,
} from './CustomAttributeData';
import type { EventInfoAllOfAddMethod } from './EventInfoAllOfAddMethod';
import {
    EventInfoAllOfAddMethodFromJSON,
    EventInfoAllOfAddMethodFromJSONTyped,
    EventInfoAllOfAddMethodToJSON,
} from './EventInfoAllOfAddMethod';
import type { EventInfoAllOfRemoveMethod } from './EventInfoAllOfRemoveMethod';
import {
    EventInfoAllOfRemoveMethodFromJSON,
    EventInfoAllOfRemoveMethodFromJSONTyped,
    EventInfoAllOfRemoveMethodToJSON,
} from './EventInfoAllOfRemoveMethod';
import type { EventAttributes } from './EventAttributes';
import {
    EventAttributesFromJSON,
    EventAttributesFromJSONTyped,
    EventAttributesToJSON,
} from './EventAttributes';
import type { EventInfoAllOfRaiseMethod } from './EventInfoAllOfRaiseMethod';
import {
    EventInfoAllOfRaiseMethodFromJSON,
    EventInfoAllOfRaiseMethodFromJSONTyped,
    EventInfoAllOfRaiseMethodToJSON,
} from './EventInfoAllOfRaiseMethod';
import type { Module } from './Module';
import {
    ModuleFromJSON,
    ModuleFromJSONTyped,
    ModuleToJSON,
} from './Module';
import type { MemberTypes } from './MemberTypes';
import {
    MemberTypesFromJSON,
    MemberTypesFromJSONTyped,
    MemberTypesToJSON,
} from './MemberTypes';

/**
 * 
 * @export
 * @interface EventInfo
 */
export interface EventInfo {
    /**
     * 
     * @type {MemberTypes}
     * @memberof EventInfo
     */
    memberType?: MemberTypes;
    /**
     * 
     * @type {string}
     * @memberof EventInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EventInfo
     */
    declaringType?: string;
    /**
     * 
     * @type {string}
     * @memberof EventInfo
     */
    reflectedType?: string;
    /**
     * 
     * @type {Module}
     * @memberof EventInfo
     */
    module?: Module;
    /**
     * 
     * @type {Array<CustomAttributeData>}
     * @memberof EventInfo
     */
    customAttributes?: Array<CustomAttributeData>;
    /**
     * 
     * @type {boolean}
     * @memberof EventInfo
     */
    isCollectible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EventInfo
     */
    metadataToken?: number;
    /**
     * 
     * @type {EventAttributes}
     * @memberof EventInfo
     */
    attributes?: EventAttributes;
    /**
     * 
     * @type {boolean}
     * @memberof EventInfo
     */
    isSpecialName?: boolean;
    /**
     * 
     * @type {EventInfoAllOfAddMethod}
     * @memberof EventInfo
     */
    addMethod?: EventInfoAllOfAddMethod;
    /**
     * 
     * @type {EventInfoAllOfRemoveMethod}
     * @memberof EventInfo
     */
    removeMethod?: EventInfoAllOfRemoveMethod;
    /**
     * 
     * @type {EventInfoAllOfRaiseMethod}
     * @memberof EventInfo
     */
    raiseMethod?: EventInfoAllOfRaiseMethod;
    /**
     * 
     * @type {boolean}
     * @memberof EventInfo
     */
    isMulticast?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EventInfo
     */
    eventHandlerType?: string;
}

/**
 * Check if a given object implements the EventInfo interface.
 */
export function instanceOfEventInfo(value: object): value is EventInfo {
    return true;
}

export function EventInfoFromJSON(json: any): EventInfo {
    return EventInfoFromJSONTyped(json, false);
}

export function EventInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'memberType': json['memberType'] == null ? undefined : MemberTypesFromJSON(json['memberType']),
        'name': json['name'] == null ? undefined : json['name'],
        'declaringType': json['declaringType'] == null ? undefined : json['declaringType'],
        'reflectedType': json['reflectedType'] == null ? undefined : json['reflectedType'],
        'module': json['module'] == null ? undefined : ModuleFromJSON(json['module']),
        'customAttributes': json['customAttributes'] == null ? undefined : ((json['customAttributes'] as Array<any>).map(CustomAttributeDataFromJSON)),
        'isCollectible': json['isCollectible'] == null ? undefined : json['isCollectible'],
        'metadataToken': json['metadataToken'] == null ? undefined : json['metadataToken'],
        'attributes': json['attributes'] == null ? undefined : EventAttributesFromJSON(json['attributes']),
        'isSpecialName': json['isSpecialName'] == null ? undefined : json['isSpecialName'],
        'addMethod': json['addMethod'] == null ? undefined : EventInfoAllOfAddMethodFromJSON(json['addMethod']),
        'removeMethod': json['removeMethod'] == null ? undefined : EventInfoAllOfRemoveMethodFromJSON(json['removeMethod']),
        'raiseMethod': json['raiseMethod'] == null ? undefined : EventInfoAllOfRaiseMethodFromJSON(json['raiseMethod']),
        'isMulticast': json['isMulticast'] == null ? undefined : json['isMulticast'],
        'eventHandlerType': json['eventHandlerType'] == null ? undefined : json['eventHandlerType'],
    };
}

export function EventInfoToJSON(value?: EventInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'memberType': MemberTypesToJSON(value['memberType']),
        'name': value['name'],
        'declaringType': value['declaringType'],
        'reflectedType': value['reflectedType'],
        'module': ModuleToJSON(value['module']),
        'customAttributes': value['customAttributes'] == null ? undefined : ((value['customAttributes'] as Array<any>).map(CustomAttributeDataToJSON)),
        'isCollectible': value['isCollectible'],
        'metadataToken': value['metadataToken'],
        'attributes': EventAttributesToJSON(value['attributes']),
        'isSpecialName': value['isSpecialName'],
        'addMethod': EventInfoAllOfAddMethodToJSON(value['addMethod']),
        'removeMethod': EventInfoAllOfRemoveMethodToJSON(value['removeMethod']),
        'raiseMethod': EventInfoAllOfRaiseMethodToJSON(value['raiseMethod']),
        'isMulticast': value['isMulticast'],
        'eventHandlerType': value['eventHandlerType'],
    };
}

