/* tslint:disable */
/* eslint-disable */
/**
 * PlexBot API
 * This the PlexBot Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: filip.iricanin@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CustomAttributeData } from './CustomAttributeData';
import {
    CustomAttributeDataFromJSON,
    CustomAttributeDataFromJSONTyped,
    CustomAttributeDataToJSON,
} from './CustomAttributeData';
import type { PropertyAttributes } from './PropertyAttributes';
import {
    PropertyAttributesFromJSON,
    PropertyAttributesFromJSONTyped,
    PropertyAttributesToJSON,
} from './PropertyAttributes';
import type { PropertyInfoAllOfSetMethod } from './PropertyInfoAllOfSetMethod';
import {
    PropertyInfoAllOfSetMethodFromJSON,
    PropertyInfoAllOfSetMethodFromJSONTyped,
    PropertyInfoAllOfSetMethodToJSON,
} from './PropertyInfoAllOfSetMethod';
import type { Module } from './Module';
import {
    ModuleFromJSON,
    ModuleFromJSONTyped,
    ModuleToJSON,
} from './Module';
import type { PropertyInfoAllOfGetMethod } from './PropertyInfoAllOfGetMethod';
import {
    PropertyInfoAllOfGetMethodFromJSON,
    PropertyInfoAllOfGetMethodFromJSONTyped,
    PropertyInfoAllOfGetMethodToJSON,
} from './PropertyInfoAllOfGetMethod';
import type { MemberTypes } from './MemberTypes';
import {
    MemberTypesFromJSON,
    MemberTypesFromJSONTyped,
    MemberTypesToJSON,
} from './MemberTypes';

/**
 * 
 * @export
 * @interface PropertyInfo
 */
export interface PropertyInfo {
    /**
     * 
     * @type {MemberTypes}
     * @memberof PropertyInfo
     */
    memberType?: MemberTypes;
    /**
     * 
     * @type {string}
     * @memberof PropertyInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyInfo
     */
    declaringType?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyInfo
     */
    reflectedType?: string;
    /**
     * 
     * @type {Module}
     * @memberof PropertyInfo
     */
    module?: Module;
    /**
     * 
     * @type {Array<CustomAttributeData>}
     * @memberof PropertyInfo
     */
    customAttributes?: Array<CustomAttributeData>;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyInfo
     */
    isCollectible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PropertyInfo
     */
    metadataToken?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyInfo
     */
    propertyType?: string;
    /**
     * 
     * @type {PropertyAttributes}
     * @memberof PropertyInfo
     */
    attributes?: PropertyAttributes;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyInfo
     */
    isSpecialName?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyInfo
     */
    canRead?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyInfo
     */
    canWrite?: boolean;
    /**
     * 
     * @type {PropertyInfoAllOfGetMethod}
     * @memberof PropertyInfo
     */
    getMethod?: PropertyInfoAllOfGetMethod;
    /**
     * 
     * @type {PropertyInfoAllOfSetMethod}
     * @memberof PropertyInfo
     */
    setMethod?: PropertyInfoAllOfSetMethod;
}

/**
 * Check if a given object implements the PropertyInfo interface.
 */
export function instanceOfPropertyInfo(value: object): value is PropertyInfo {
    return true;
}

export function PropertyInfoFromJSON(json: any): PropertyInfo {
    return PropertyInfoFromJSONTyped(json, false);
}

export function PropertyInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PropertyInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'memberType': json['memberType'] == null ? undefined : MemberTypesFromJSON(json['memberType']),
        'name': json['name'] == null ? undefined : json['name'],
        'declaringType': json['declaringType'] == null ? undefined : json['declaringType'],
        'reflectedType': json['reflectedType'] == null ? undefined : json['reflectedType'],
        'module': json['module'] == null ? undefined : ModuleFromJSON(json['module']),
        'customAttributes': json['customAttributes'] == null ? undefined : ((json['customAttributes'] as Array<any>).map(CustomAttributeDataFromJSON)),
        'isCollectible': json['isCollectible'] == null ? undefined : json['isCollectible'],
        'metadataToken': json['metadataToken'] == null ? undefined : json['metadataToken'],
        'propertyType': json['propertyType'] == null ? undefined : json['propertyType'],
        'attributes': json['attributes'] == null ? undefined : PropertyAttributesFromJSON(json['attributes']),
        'isSpecialName': json['isSpecialName'] == null ? undefined : json['isSpecialName'],
        'canRead': json['canRead'] == null ? undefined : json['canRead'],
        'canWrite': json['canWrite'] == null ? undefined : json['canWrite'],
        'getMethod': json['getMethod'] == null ? undefined : PropertyInfoAllOfGetMethodFromJSON(json['getMethod']),
        'setMethod': json['setMethod'] == null ? undefined : PropertyInfoAllOfSetMethodFromJSON(json['setMethod']),
    };
}

export function PropertyInfoToJSON(value?: PropertyInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'memberType': MemberTypesToJSON(value['memberType']),
        'name': value['name'],
        'declaringType': value['declaringType'],
        'reflectedType': value['reflectedType'],
        'module': ModuleToJSON(value['module']),
        'customAttributes': value['customAttributes'] == null ? undefined : ((value['customAttributes'] as Array<any>).map(CustomAttributeDataToJSON)),
        'isCollectible': value['isCollectible'],
        'metadataToken': value['metadataToken'],
        'propertyType': value['propertyType'],
        'attributes': PropertyAttributesToJSON(value['attributes']),
        'isSpecialName': value['isSpecialName'],
        'canRead': value['canRead'],
        'canWrite': value['canWrite'],
        'getMethod': PropertyInfoAllOfGetMethodToJSON(value['getMethod']),
        'setMethod': PropertyInfoAllOfSetMethodToJSON(value['setMethod']),
    };
}

