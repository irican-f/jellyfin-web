/* tslint:disable */
/* eslint-disable */
/**
 * PlexBot API
 * This the PlexBot Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: filip.iricanin@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CustomAttributeData } from './CustomAttributeData';
import {
    CustomAttributeDataFromJSON,
    CustomAttributeDataFromJSONTyped,
    CustomAttributeDataToJSON,
} from './CustomAttributeData';
import type { Assembly } from './Assembly';
import {
    AssemblyFromJSON,
    AssemblyFromJSONTyped,
    AssemblyToJSON,
} from './Assembly';
import type { ModuleHandle } from './ModuleHandle';
import {
    ModuleHandleFromJSON,
    ModuleHandleFromJSONTyped,
    ModuleHandleToJSON,
} from './ModuleHandle';

/**
 * 
 * @export
 * @interface Module
 */
export interface Module {
    /**
     * 
     * @type {Assembly}
     * @memberof Module
     */
    assembly?: Assembly;
    /**
     * 
     * @type {string}
     * @memberof Module
     */
    fullyQualifiedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Module
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Module
     */
    mdStreamVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof Module
     */
    moduleVersionId?: string;
    /**
     * 
     * @type {string}
     * @memberof Module
     */
    scopeName?: string;
    /**
     * 
     * @type {ModuleHandle}
     * @memberof Module
     */
    moduleHandle?: ModuleHandle;
    /**
     * 
     * @type {Array<CustomAttributeData>}
     * @memberof Module
     */
    customAttributes?: Array<CustomAttributeData>;
    /**
     * 
     * @type {number}
     * @memberof Module
     */
    metadataToken?: number;
}

/**
 * Check if a given object implements the Module interface.
 */
export function instanceOfModule(value: object): value is Module {
    return true;
}

export function ModuleFromJSON(json: any): Module {
    return ModuleFromJSONTyped(json, false);
}

export function ModuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Module {
    if (json == null) {
        return json;
    }
    return {
        
        'assembly': json['assembly'] == null ? undefined : AssemblyFromJSON(json['assembly']),
        'fullyQualifiedName': json['fullyQualifiedName'] == null ? undefined : json['fullyQualifiedName'],
        'name': json['name'] == null ? undefined : json['name'],
        'mdStreamVersion': json['mdStreamVersion'] == null ? undefined : json['mdStreamVersion'],
        'moduleVersionId': json['moduleVersionId'] == null ? undefined : json['moduleVersionId'],
        'scopeName': json['scopeName'] == null ? undefined : json['scopeName'],
        'moduleHandle': json['moduleHandle'] == null ? undefined : ModuleHandleFromJSON(json['moduleHandle']),
        'customAttributes': json['customAttributes'] == null ? undefined : ((json['customAttributes'] as Array<any>).map(CustomAttributeDataFromJSON)),
        'metadataToken': json['metadataToken'] == null ? undefined : json['metadataToken'],
    };
}

export function ModuleToJSON(value?: Module | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'assembly': AssemblyToJSON(value['assembly']),
        'fullyQualifiedName': value['fullyQualifiedName'],
        'name': value['name'],
        'mdStreamVersion': value['mdStreamVersion'],
        'moduleVersionId': value['moduleVersionId'],
        'scopeName': value['scopeName'],
        'moduleHandle': ModuleHandleToJSON(value['moduleHandle']),
        'customAttributes': value['customAttributes'] == null ? undefined : ((value['customAttributes'] as Array<any>).map(CustomAttributeDataToJSON)),
        'metadataToken': value['metadataToken'],
    };
}

