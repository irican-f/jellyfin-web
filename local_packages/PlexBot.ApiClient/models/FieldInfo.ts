/* tslint:disable */
/* eslint-disable */
/**
 * PlexBot API
 * This the PlexBot Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: filip.iricanin@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CustomAttributeData } from './CustomAttributeData';
import {
    CustomAttributeDataFromJSON,
    CustomAttributeDataFromJSONTyped,
    CustomAttributeDataToJSON,
} from './CustomAttributeData';
import type { RuntimeFieldHandle } from './RuntimeFieldHandle';
import {
    RuntimeFieldHandleFromJSON,
    RuntimeFieldHandleFromJSONTyped,
    RuntimeFieldHandleToJSON,
} from './RuntimeFieldHandle';
import type { Module } from './Module';
import {
    ModuleFromJSON,
    ModuleFromJSONTyped,
    ModuleToJSON,
} from './Module';
import type { FieldAttributes } from './FieldAttributes';
import {
    FieldAttributesFromJSON,
    FieldAttributesFromJSONTyped,
    FieldAttributesToJSON,
} from './FieldAttributes';
import type { MemberTypes } from './MemberTypes';
import {
    MemberTypesFromJSON,
    MemberTypesFromJSONTyped,
    MemberTypesToJSON,
} from './MemberTypes';

/**
 * 
 * @export
 * @interface FieldInfo
 */
export interface FieldInfo {
    /**
     * 
     * @type {MemberTypes}
     * @memberof FieldInfo
     */
    memberType?: MemberTypes;
    /**
     * 
     * @type {string}
     * @memberof FieldInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldInfo
     */
    declaringType?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldInfo
     */
    reflectedType?: string;
    /**
     * 
     * @type {Module}
     * @memberof FieldInfo
     */
    module?: Module;
    /**
     * 
     * @type {Array<CustomAttributeData>}
     * @memberof FieldInfo
     */
    customAttributes?: Array<CustomAttributeData>;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isCollectible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FieldInfo
     */
    metadataToken?: number;
    /**
     * 
     * @type {FieldAttributes}
     * @memberof FieldInfo
     */
    attributes?: FieldAttributes;
    /**
     * 
     * @type {string}
     * @memberof FieldInfo
     */
    fieldType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isInitOnly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isLiteral?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     * @deprecated
     */
    isNotSerialized?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isPinvokeImpl?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isSpecialName?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isStatic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isFamily?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isFamilyAndAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isFamilyOrAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isPrivate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isPublic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isSecurityCritical?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isSecuritySafeCritical?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldInfo
     */
    isSecurityTransparent?: boolean;
    /**
     * 
     * @type {RuntimeFieldHandle}
     * @memberof FieldInfo
     */
    fieldHandle?: RuntimeFieldHandle;
}

/**
 * Check if a given object implements the FieldInfo interface.
 */
export function instanceOfFieldInfo(value: object): value is FieldInfo {
    return true;
}

export function FieldInfoFromJSON(json: any): FieldInfo {
    return FieldInfoFromJSONTyped(json, false);
}

export function FieldInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'memberType': json['memberType'] == null ? undefined : MemberTypesFromJSON(json['memberType']),
        'name': json['name'] == null ? undefined : json['name'],
        'declaringType': json['declaringType'] == null ? undefined : json['declaringType'],
        'reflectedType': json['reflectedType'] == null ? undefined : json['reflectedType'],
        'module': json['module'] == null ? undefined : ModuleFromJSON(json['module']),
        'customAttributes': json['customAttributes'] == null ? undefined : ((json['customAttributes'] as Array<any>).map(CustomAttributeDataFromJSON)),
        'isCollectible': json['isCollectible'] == null ? undefined : json['isCollectible'],
        'metadataToken': json['metadataToken'] == null ? undefined : json['metadataToken'],
        'attributes': json['attributes'] == null ? undefined : FieldAttributesFromJSON(json['attributes']),
        'fieldType': json['fieldType'] == null ? undefined : json['fieldType'],
        'isInitOnly': json['isInitOnly'] == null ? undefined : json['isInitOnly'],
        'isLiteral': json['isLiteral'] == null ? undefined : json['isLiteral'],
        'isNotSerialized': json['isNotSerialized'] == null ? undefined : json['isNotSerialized'],
        'isPinvokeImpl': json['isPinvokeImpl'] == null ? undefined : json['isPinvokeImpl'],
        'isSpecialName': json['isSpecialName'] == null ? undefined : json['isSpecialName'],
        'isStatic': json['isStatic'] == null ? undefined : json['isStatic'],
        'isAssembly': json['isAssembly'] == null ? undefined : json['isAssembly'],
        'isFamily': json['isFamily'] == null ? undefined : json['isFamily'],
        'isFamilyAndAssembly': json['isFamilyAndAssembly'] == null ? undefined : json['isFamilyAndAssembly'],
        'isFamilyOrAssembly': json['isFamilyOrAssembly'] == null ? undefined : json['isFamilyOrAssembly'],
        'isPrivate': json['isPrivate'] == null ? undefined : json['isPrivate'],
        'isPublic': json['isPublic'] == null ? undefined : json['isPublic'],
        'isSecurityCritical': json['isSecurityCritical'] == null ? undefined : json['isSecurityCritical'],
        'isSecuritySafeCritical': json['isSecuritySafeCritical'] == null ? undefined : json['isSecuritySafeCritical'],
        'isSecurityTransparent': json['isSecurityTransparent'] == null ? undefined : json['isSecurityTransparent'],
        'fieldHandle': json['fieldHandle'] == null ? undefined : RuntimeFieldHandleFromJSON(json['fieldHandle']),
    };
}

export function FieldInfoToJSON(value?: FieldInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'memberType': MemberTypesToJSON(value['memberType']),
        'name': value['name'],
        'declaringType': value['declaringType'],
        'reflectedType': value['reflectedType'],
        'module': ModuleToJSON(value['module']),
        'customAttributes': value['customAttributes'] == null ? undefined : ((value['customAttributes'] as Array<any>).map(CustomAttributeDataToJSON)),
        'isCollectible': value['isCollectible'],
        'metadataToken': value['metadataToken'],
        'attributes': FieldAttributesToJSON(value['attributes']),
        'fieldType': value['fieldType'],
        'isInitOnly': value['isInitOnly'],
        'isLiteral': value['isLiteral'],
        'isNotSerialized': value['isNotSerialized'],
        'isPinvokeImpl': value['isPinvokeImpl'],
        'isSpecialName': value['isSpecialName'],
        'isStatic': value['isStatic'],
        'isAssembly': value['isAssembly'],
        'isFamily': value['isFamily'],
        'isFamilyAndAssembly': value['isFamilyAndAssembly'],
        'isFamilyOrAssembly': value['isFamilyOrAssembly'],
        'isPrivate': value['isPrivate'],
        'isPublic': value['isPublic'],
        'isSecurityCritical': value['isSecurityCritical'],
        'isSecuritySafeCritical': value['isSecuritySafeCritical'],
        'isSecurityTransparent': value['isSecurityTransparent'],
        'fieldHandle': RuntimeFieldHandleToJSON(value['fieldHandle']),
    };
}

