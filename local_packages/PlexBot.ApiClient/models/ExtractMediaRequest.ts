/* tslint:disable */
/* eslint-disable */
/**
 * PlexBot API
 * This the PlexBot Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: filip.iricanin@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaCategory } from './MediaCategory';
import {
    MediaCategoryFromJSON,
    MediaCategoryFromJSONTyped,
    MediaCategoryToJSON,
} from './MediaCategory';

/**
 * 
 * @export
 * @interface ExtractMediaRequest
 */
export interface ExtractMediaRequest {
    /**
     * 
     * @type {string}
     * @memberof ExtractMediaRequest
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtractMediaRequest
     */
    fileHost?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtractMediaRequest
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtractMediaRequest
     */
    userId?: string;
    /**
     * 
     * @type {MediaCategory}
     * @memberof ExtractMediaRequest
     */
    mediaCategory?: MediaCategory;
}

/**
 * Check if a given object implements the ExtractMediaRequest interface.
 */
export function instanceOfExtractMediaRequest(value: object): value is ExtractMediaRequest {
    return true;
}

export function ExtractMediaRequestFromJSON(json: any): ExtractMediaRequest {
    return ExtractMediaRequestFromJSONTyped(json, false);
}

export function ExtractMediaRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtractMediaRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'] == null ? undefined : json['url'],
        'fileHost': json['fileHost'] == null ? undefined : json['fileHost'],
        'userName': json['userName'] == null ? undefined : json['userName'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'mediaCategory': json['mediaCategory'] == null ? undefined : MediaCategoryFromJSON(json['mediaCategory']),
    };
}

export function ExtractMediaRequestToJSON(value?: ExtractMediaRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'url': value['url'],
        'fileHost': value['fileHost'],
        'userName': value['userName'],
        'userId': value['userId'],
        'mediaCategory': MediaCategoryToJSON(value['mediaCategory']),
    };
}

